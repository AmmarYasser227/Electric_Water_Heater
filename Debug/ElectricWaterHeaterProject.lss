
ElectricWaterHeaterProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000017e6  0000185a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000123c  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a84  00000000  00000000  00002ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  000037c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000039b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00005dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00007147  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00008320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  000084e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  000087d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009144  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a3 0b 	call	0x1746	; 0x1746 <main>
      7a:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 ca 0b 	jmp	0x1794	; 0x1794 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 e6 0b 	jmp	0x17cc	; 0x17cc <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <TWI_Init>:

#include "I2C_Driver.h"


void TWI_Init (void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62

	//set_bit(TWCR,6);

	TWSR=0;
     e26:	e1 e2       	ldi	r30, 0x21	; 33
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	10 82       	st	Z, r1

	TWBR=0x07;
     e2c:	e0 e2       	ldi	r30, 0x20	; 32
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	80 83       	st	Z, r24

	TWCR|=(1<<TWEN);
     e34:	a6 e5       	ldi	r26, 0x56	; 86
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e6 e5       	ldi	r30, 0x56	; 86
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	84 60       	ori	r24, 0x04	; 4
     e40:	8c 93       	st	X, r24

}
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <TWI_Start>:


void TWI_Start (void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62

	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     e50:	e6 e5       	ldi	r30, 0x56	; 86
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	84 ea       	ldi	r24, 0xA4	; 164
     e56:	80 83       	st	Z, r24

	while (get_bit(TWCR,TWINT)==0)
     e58:	e6 e5       	ldi	r30, 0x56	; 86
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	88 1f       	adc	r24, r24
     e60:	88 27       	eor	r24, r24
     e62:	88 1f       	adc	r24, r24
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	90 70       	andi	r25, 0x00	; 0
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	a9 f3       	breq	.-22     	; 0xe58 <TWI_Start+0x10>

	{

	}

}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <TWI_Stop>:




void TWI_Stop (void)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62

	TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT);
     e7c:	e6 e5       	ldi	r30, 0x56	; 86
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	84 e9       	ldi	r24, 0x94	; 148
     e82:	80 83       	st	Z, r24

}
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <TWI_Write>:




void TWI_Write (char data)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01

	TWDR=data;
     e96:	e3 e2       	ldi	r30, 0x23	; 35
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	80 83       	st	Z, r24

	TWCR= (1<<TWINT)|(1<<TWEN);
     e9e:	e6 e5       	ldi	r30, 0x56	; 86
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	84 e8       	ldi	r24, 0x84	; 132
     ea4:	80 83       	st	Z, r24

	while (get_bit(TWCR,TWINT)==0)
     ea6:	e6 e5       	ldi	r30, 0x56	; 86
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	88 1f       	adc	r24, r24
     eae:	88 27       	eor	r24, r24
     eb0:	88 1f       	adc	r24, r24
     eb2:	88 2f       	mov	r24, r24
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	90 70       	andi	r25, 0x00	; 0
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	a9 f3       	breq	.-22     	; 0xea6 <TWI_Write+0x1c>

	{

	}

}
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <TWI_Read_Nack>:




void TWI_Read_Nack (char* ptr) 
{
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <TWI_Read_Nack+0x6>
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	89 83       	std	Y+1, r24	; 0x01

	TWCR=(1<<TWINT)|(1<<TWEN);
     ed2:	e6 e5       	ldi	r30, 0x56	; 86
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	84 e8       	ldi	r24, 0x84	; 132
     ed8:	80 83       	st	Z, r24

	while (get_bit(TWCR,TWINT)==0)
     eda:	e6 e5       	ldi	r30, 0x56	; 86
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	88 1f       	adc	r24, r24
     ee2:	88 27       	eor	r24, r24
     ee4:	88 1f       	adc	r24, r24
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	90 70       	andi	r25, 0x00	; 0
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	a9 f3       	breq	.-22     	; 0xeda <TWI_Read_Nack+0x16>

	{

	}

	*ptr=TWDR;
     ef0:	e3 e2       	ldi	r30, 0x23	; 35
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	e9 81       	ldd	r30, Y+1	; 0x01
     ef8:	fa 81       	ldd	r31, Y+2	; 0x02
     efa:	80 83       	st	Z, r24

}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <ADC_Init>:
#include "../../LIB/Clock.h"
#include <util/delay.h>

#define ADC_value *((volatile uint16_t*) 0x24);

void ADC_Init(){
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
	//using the internal 2.56V source
	set_bit(ADMUX, REFS0);
     f0e:	a7 e2       	ldi	r26, 0x27	; 39
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e7 e2       	ldi	r30, 0x27	; 39
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 64       	ori	r24, 0x40	; 64
     f1a:	8c 93       	st	X, r24
	clear_bit(ADMUX, REFS1);	//cleared = external ref, set = internal ref
     f1c:	a7 e2       	ldi	r26, 0x27	; 39
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e7 e2       	ldi	r30, 0x27	; 39
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8f 77       	andi	r24, 0x7F	; 127
     f28:	8c 93       	st	X, r24
	
	//Enable ADC
	set_bit(ADCSRA, ADEN);
     f2a:	a6 e2       	ldi	r26, 0x26	; 38
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e6 e2       	ldi	r30, 0x26	; 38
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	80 68       	ori	r24, 0x80	; 128
     f36:	8c 93       	st	X, r24
	
	//set the prescaler value to be divided by 16
	set_bit(ADCSRA, ADPS2);
     f38:	a6 e2       	ldi	r26, 0x26	; 38
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	e6 e2       	ldi	r30, 0x26	; 38
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	84 60       	ori	r24, 0x04	; 4
     f44:	8c 93       	st	X, r24
	
	//ADLAR pin is left with 0 as right adjust
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <ADC_Read>:

uint16_t ADC_Read(uint16_t ADC_Channel){
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	60 97       	sbiw	r28, 0x10	; 16
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	98 8b       	std	Y+16, r25	; 0x10
     f62:	8f 87       	std	Y+15, r24	; 0x0f
	
	//uint16_t ADC_Value = 0;
	ADMUX = (ADMUX&0xE0) | ADC_Channel;
     f64:	a7 e2       	ldi	r26, 0x27	; 39
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e7 e2       	ldi	r30, 0x27	; 39
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	98 2f       	mov	r25, r24
     f70:	90 7e       	andi	r25, 0xE0	; 224
     f72:	8f 85       	ldd	r24, Y+15	; 0x0f
     f74:	89 2b       	or	r24, r25
     f76:	8c 93       	st	X, r24
	
	//Start Conversion
	set_bit(ADCSRA, ADSC);
     f78:	a6 e2       	ldi	r26, 0x26	; 38
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e6 e2       	ldi	r30, 0x26	; 38
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 64       	ori	r24, 0x40	; 64
     f84:	8c 93       	st	X, r24
	
	//Wait until the conversion is done and flag is set to 1
	while(read_bit(ADCSRA, ADIF) == 0);
     f86:	e6 e2       	ldi	r30, 0x26	; 38
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	82 95       	swap	r24
     f8e:	8f 70       	andi	r24, 0x0F	; 15
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	81 70       	andi	r24, 0x01	; 1
     f96:	90 70       	andi	r25, 0x00	; 0
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	a9 f3       	breq	.-22     	; 0xf86 <ADC_Read+0x3a>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a0 e2       	ldi	r26, 0x20	; 32
     fa2:	b1 e4       	ldi	r27, 0x41	; 65
     fa4:	8b 87       	std	Y+11, r24	; 0x0b
     fa6:	9c 87       	std	Y+12, r25	; 0x0c
     fa8:	ad 87       	std	Y+13, r26	; 0x0d
     faa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fac:	6b 85       	ldd	r22, Y+11	; 0x0b
     fae:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	4a ef       	ldi	r20, 0xFA	; 250
     fba:	54 e4       	ldi	r21, 0x44	; 68
     fbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	8f 83       	std	Y+7, r24	; 0x07
     fc6:	98 87       	std	Y+8, r25	; 0x08
     fc8:	a9 87       	std	Y+9, r26	; 0x09
     fca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	78 85       	ldd	r23, Y+8	; 0x08
     fd0:	89 85       	ldd	r24, Y+9	; 0x09
     fd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e8       	ldi	r20, 0x80	; 128
     fda:	5f e3       	ldi	r21, 0x3F	; 63
     fdc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fe0:	88 23       	and	r24, r24
     fe2:	2c f4       	brge	.+10     	; 0xfee <ADC_Read+0xa2>
		__ticks = 1;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	8d 83       	std	Y+5, r24	; 0x05
     fec:	3f c0       	rjmp	.+126    	; 0x106c <ADC_Read+0x120>
	else if (__tmp > 65535)
     fee:	6f 81       	ldd	r22, Y+7	; 0x07
     ff0:	78 85       	ldd	r23, Y+8	; 0x08
     ff2:	89 85       	ldd	r24, Y+9	; 0x09
     ff4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	3f ef       	ldi	r19, 0xFF	; 255
     ffa:	4f e7       	ldi	r20, 0x7F	; 127
     ffc:	57 e4       	ldi	r21, 0x47	; 71
     ffe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1002:	18 16       	cp	r1, r24
    1004:	4c f5       	brge	.+82     	; 0x1058 <ADC_Read+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1006:	6b 85       	ldd	r22, Y+11	; 0x0b
    1008:	7c 85       	ldd	r23, Y+12	; 0x0c
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e2       	ldi	r20, 0x20	; 32
    1014:	51 e4       	ldi	r21, 0x41	; 65
    1016:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	bc 01       	movw	r22, r24
    1020:	cd 01       	movw	r24, r26
    1022:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1026:	dc 01       	movw	r26, r24
    1028:	cb 01       	movw	r24, r22
    102a:	9e 83       	std	Y+6, r25	; 0x06
    102c:	8d 83       	std	Y+5, r24	; 0x05
    102e:	0f c0       	rjmp	.+30     	; 0x104e <ADC_Read+0x102>
    1030:	88 ec       	ldi	r24, 0xC8	; 200
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	f1 f7       	brne	.-4      	; 0x103c <ADC_Read+0xf0>
    1040:	9c 83       	std	Y+4, r25	; 0x04
    1042:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1044:	8d 81       	ldd	r24, Y+5	; 0x05
    1046:	9e 81       	ldd	r25, Y+6	; 0x06
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	9e 83       	std	Y+6, r25	; 0x06
    104c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	69 f7       	brne	.-38     	; 0x1030 <ADC_Read+0xe4>
    1056:	14 c0       	rjmp	.+40     	; 0x1080 <ADC_Read+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1058:	6f 81       	ldd	r22, Y+7	; 0x07
    105a:	78 85       	ldd	r23, Y+8	; 0x08
    105c:	89 85       	ldd	r24, Y+9	; 0x09
    105e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1060:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	9e 81       	ldd	r25, Y+6	; 0x06
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <ADC_Read+0x12c>
    107c:	9a 83       	std	Y+2, r25	; 0x02
    107e:	89 83       	std	Y+1, r24	; 0x01
	
	//ADCL is the lower bits in first Reg, ADCH is higher bits in second Reg
	//ADCH*256 is to get the right value assuming the two bits are ones we get 768 not 3 like normal binary
	//ADC_Value = (int)ADCL + (int)ADCH * 256;
	
	return ADC_value;
    1080:	e4 e2       	ldi	r30, 0x24	; 36
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	91 81       	ldd	r25, Z+1	; 0x01


}
    1088:	60 96       	adiw	r28, 0x10	; 16
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <EEPROM_Write>:


#include "EEPROM.h"

void EEPROM_Write (char data, char address)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <EEPROM_Write+0x6>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	89 83       	std	Y+1, r24	; 0x01
    10a6:	6a 83       	std	Y+2, r22	; 0x02

	TWI_Start();
    10a8:	0e 94 24 07 	call	0xe48	; 0xe48 <TWI_Start>

	TWI_Write(0xA8); //slave address is 1010.100 and a 0 in the 8th bit to indicate Writting.
    10ac:	88 ea       	ldi	r24, 0xA8	; 168
    10ae:	0e 94 45 07 	call	0xe8a	; 0xe8a <TWI_Write>

	TWI_Write(address);
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	0e 94 45 07 	call	0xe8a	; 0xe8a <TWI_Write>

	TWI_Write(data);
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	0e 94 45 07 	call	0xe8a	; 0xe8a <TWI_Write>

	TWI_Stop();
    10be:	0e 94 3a 07 	call	0xe74	; 0xe74 <TWI_Stop>

}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <EEPROM_Read>:

void EEPROM_Read (char address, char* ptr)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <EEPROM_Read+0x6>
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	7b 83       	std	Y+3, r23	; 0x03
    10dc:	6a 83       	std	Y+2, r22	; 0x02

	TWI_Start();
    10de:	0e 94 24 07 	call	0xe48	; 0xe48 <TWI_Start>

	TWI_Write(0xA8);
    10e2:	88 ea       	ldi	r24, 0xA8	; 168
    10e4:	0e 94 45 07 	call	0xe8a	; 0xe8a <TWI_Write>

	TWI_Write(address);
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	0e 94 45 07 	call	0xe8a	; 0xe8a <TWI_Write>

	TWI_Start();
    10ee:	0e 94 24 07 	call	0xe48	; 0xe48 <TWI_Start>

	TWI_Write(0xA9);
    10f2:	89 ea       	ldi	r24, 0xA9	; 169
    10f4:	0e 94 45 07 	call	0xe8a	; 0xe8a <TWI_Write>

	TWI_Read_Nack(ptr);
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	9b 81       	ldd	r25, Y+3	; 0x03
    10fc:	0e 94 62 07 	call	0xec4	; 0xec4 <TWI_Read_Nack>

	TWI_Stop();
    1100:	0e 94 3a 07 	call	0xe74	; 0xe74 <TWI_Stop>




}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <APP>:

#include "APP.h"


void APP()
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	e0 97       	sbiw	r28, 0x30	; 48
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
	u8 Wanted_temp = 60;
    1124:	8c e3       	ldi	r24, 0x3C	; 60
    1126:	8e a7       	std	Y+46, r24	; 0x2e
	char Current_temp = 0;
    1128:	1d a6       	std	Y+45, r1	; 0x2d
	u8 State = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	8c a7       	std	Y+44, r24	; 0x2c
	u8 i;
	DDRA = 0x17;
    112e:	ea e3       	ldi	r30, 0x3A	; 58
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	87 e1       	ldi	r24, 0x17	; 23
    1134:	80 83       	st	Z, r24
	DDRD = 0x3;
    1136:	e1 e3       	ldi	r30, 0x31	; 49
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	80 83       	st	Z, r24
	DDRC = 0x00;
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	10 82       	st	Z, r1
	set_bit(PORTA, 1);
    1144:	ab e3       	ldi	r26, 0x3B	; 59
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	eb e3       	ldi	r30, 0x3B	; 59
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	82 60       	ori	r24, 0x02	; 2
    1150:	8c 93       	st	X, r24
	ADC_Init();
    1152:	0e 94 83 07 	call	0xf06	; 0xf06 <ADC_Init>
	TWI_Init();
    1156:	0e 94 0f 07 	call	0xe1e	; 0xe1e <TWI_Init>

	while (1)
	{

		switch (State)
    115a:	8c a5       	ldd	r24, Y+44	; 0x2c
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	38 ab       	std	Y+48, r19	; 0x30
    1162:	2f a7       	std	Y+47, r18	; 0x2f
    1164:	8f a5       	ldd	r24, Y+47	; 0x2f
    1166:	98 a9       	ldd	r25, Y+48	; 0x30
    1168:	82 30       	cpi	r24, 0x02	; 2
    116a:	91 05       	cpc	r25, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <APP+0x60>
    116e:	c4 c0       	rjmp	.+392    	; 0x12f8 <APP+0x1e8>
    1170:	2f a5       	ldd	r18, Y+47	; 0x2f
    1172:	38 a9       	ldd	r19, Y+48	; 0x30
    1174:	23 30       	cpi	r18, 0x03	; 3
    1176:	31 05       	cpc	r19, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <APP+0x6c>
    117a:	7c c1       	rjmp	.+760    	; 0x1474 <APP+0x364>
    117c:	8f a5       	ldd	r24, Y+47	; 0x2f
    117e:	98 a9       	ldd	r25, Y+48	; 0x30
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	91 05       	cpc	r25, r1
    1184:	09 f0       	breq	.+2      	; 0x1188 <APP+0x78>
    1186:	34 c2       	rjmp	.+1128   	; 0x15f0 <APP+0x4e0>
		{
			case 1 :
			EEPROM_Read(0x00, &Wanted_temp);
    1188:	9e 01       	movw	r18, r28
    118a:	22 5d       	subi	r18, 0xD2	; 210
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	b9 01       	movw	r22, r18
    1194:	0e 94 66 08 	call	0x10cc	; 0x10cc <EEPROM_Read>
			for(i = 0 ; i < 10 ; i++ ){					//Blinking the 7Seg with set temperature for 3s
    1198:	1b a6       	std	Y+43, r1	; 0x2b
    119a:	a2 c0       	rjmp	.+324    	; 0x12e0 <APP+0x1d0>
				SS_1D(PORTB, (Wanted_temp % 10));		//
    119c:	a8 e3       	ldi	r26, 0x38	; 56
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e8 e3       	ldi	r30, 0x38	; 56
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	28 2f       	mov	r18, r24
    11a8:	20 7f       	andi	r18, 0xF0	; 240
    11aa:	8e a5       	ldd	r24, Y+46	; 0x2e
    11ac:	9a e0       	ldi	r25, 0x0A	; 10
    11ae:	69 2f       	mov	r22, r25
    11b0:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodqi4>
    11b4:	89 2f       	mov	r24, r25
    11b6:	8f 70       	andi	r24, 0x0F	; 15
    11b8:	82 2b       	or	r24, r18
    11ba:	8c 93       	st	X, r24
				SS_2D(PORTB, (Wanted_temp / 10));		//
    11bc:	a8 e3       	ldi	r26, 0x38	; 56
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e8 e3       	ldi	r30, 0x38	; 56
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	28 2f       	mov	r18, r24
    11c8:	2f 70       	andi	r18, 0x0F	; 15
    11ca:	8e a5       	ldd	r24, Y+46	; 0x2e
    11cc:	9a e0       	ldi	r25, 0x0A	; 10
    11ce:	69 2f       	mov	r22, r25
    11d0:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodqi4>
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	82 95       	swap	r24
    11da:	92 95       	swap	r25
    11dc:	90 7f       	andi	r25, 0xF0	; 240
    11de:	98 27       	eor	r25, r24
    11e0:	80 7f       	andi	r24, 0xF0	; 240
    11e2:	98 27       	eor	r25, r24
    11e4:	82 2b       	or	r24, r18
    11e6:	8c 93       	st	X, r24
				Toggle_port(DDRB);						//
    11e8:	a7 e3       	ldi	r26, 0x37	; 55
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e7 e3       	ldi	r30, 0x37	; 55
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	80 95       	com	r24
    11f4:	8c 93       	st	X, r24
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a6 e9       	ldi	r26, 0x96	; 150
    11fc:	b3 e4       	ldi	r27, 0x43	; 67
    11fe:	8f a3       	std	Y+39, r24	; 0x27
    1200:	98 a7       	std	Y+40, r25	; 0x28
    1202:	a9 a7       	std	Y+41, r26	; 0x29
    1204:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1206:	6f a1       	ldd	r22, Y+39	; 0x27
    1208:	78 a5       	ldd	r23, Y+40	; 0x28
    120a:	89 a5       	ldd	r24, Y+41	; 0x29
    120c:	9a a5       	ldd	r25, Y+42	; 0x2a
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	4a ef       	ldi	r20, 0xFA	; 250
    1214:	54 e4       	ldi	r21, 0x44	; 68
    1216:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	8b a3       	std	Y+35, r24	; 0x23
    1220:	9c a3       	std	Y+36, r25	; 0x24
    1222:	ad a3       	std	Y+37, r26	; 0x25
    1224:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1226:	6b a1       	ldd	r22, Y+35	; 0x23
    1228:	7c a1       	ldd	r23, Y+36	; 0x24
    122a:	8d a1       	ldd	r24, Y+37	; 0x25
    122c:	9e a1       	ldd	r25, Y+38	; 0x26
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e8       	ldi	r20, 0x80	; 128
    1234:	5f e3       	ldi	r21, 0x3F	; 63
    1236:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    123a:	88 23       	and	r24, r24
    123c:	2c f4       	brge	.+10     	; 0x1248 <APP+0x138>
		__ticks = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9a a3       	std	Y+34, r25	; 0x22
    1244:	89 a3       	std	Y+33, r24	; 0x21
    1246:	3f c0       	rjmp	.+126    	; 0x12c6 <APP+0x1b6>
	else if (__tmp > 65535)
    1248:	6b a1       	ldd	r22, Y+35	; 0x23
    124a:	7c a1       	ldd	r23, Y+36	; 0x24
    124c:	8d a1       	ldd	r24, Y+37	; 0x25
    124e:	9e a1       	ldd	r25, Y+38	; 0x26
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	3f ef       	ldi	r19, 0xFF	; 255
    1254:	4f e7       	ldi	r20, 0x7F	; 127
    1256:	57 e4       	ldi	r21, 0x47	; 71
    1258:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    125c:	18 16       	cp	r1, r24
    125e:	4c f5       	brge	.+82     	; 0x12b2 <APP+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1260:	6f a1       	ldd	r22, Y+39	; 0x27
    1262:	78 a5       	ldd	r23, Y+40	; 0x28
    1264:	89 a5       	ldd	r24, Y+41	; 0x29
    1266:	9a a5       	ldd	r25, Y+42	; 0x2a
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e2       	ldi	r20, 0x20	; 32
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9a a3       	std	Y+34, r25	; 0x22
    1286:	89 a3       	std	Y+33, r24	; 0x21
    1288:	0f c0       	rjmp	.+30     	; 0x12a8 <APP+0x198>
    128a:	88 ec       	ldi	r24, 0xC8	; 200
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	98 a3       	std	Y+32, r25	; 0x20
    1290:	8f 8f       	std	Y+31, r24	; 0x1f
    1292:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1294:	98 a1       	ldd	r25, Y+32	; 0x20
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <APP+0x186>
    129a:	98 a3       	std	Y+32, r25	; 0x20
    129c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129e:	89 a1       	ldd	r24, Y+33	; 0x21
    12a0:	9a a1       	ldd	r25, Y+34	; 0x22
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	9a a3       	std	Y+34, r25	; 0x22
    12a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a8:	89 a1       	ldd	r24, Y+33	; 0x21
    12aa:	9a a1       	ldd	r25, Y+34	; 0x22
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	69 f7       	brne	.-38     	; 0x128a <APP+0x17a>
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <APP+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b2:	6b a1       	ldd	r22, Y+35	; 0x23
    12b4:	7c a1       	ldd	r23, Y+36	; 0x24
    12b6:	8d a1       	ldd	r24, Y+37	; 0x25
    12b8:	9e a1       	ldd	r25, Y+38	; 0x26
    12ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9a a3       	std	Y+34, r25	; 0x22
    12c4:	89 a3       	std	Y+33, r24	; 0x21
    12c6:	89 a1       	ldd	r24, Y+33	; 0x21
    12c8:	9a a1       	ldd	r25, Y+34	; 0x22
    12ca:	9e 8f       	std	Y+30, r25	; 0x1e
    12cc:	8d 8f       	std	Y+29, r24	; 0x1d
    12ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <APP+0x1c2>
    12d6:	9e 8f       	std	Y+30, r25	; 0x1e
    12d8:	8d 8f       	std	Y+29, r24	; 0x1d

		switch (State)
		{
			case 1 :
			EEPROM_Read(0x00, &Wanted_temp);
			for(i = 0 ; i < 10 ; i++ ){					//Blinking the 7Seg with set temperature for 3s
    12da:	8b a5       	ldd	r24, Y+43	; 0x2b
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
    12de:	8b a7       	std	Y+43, r24	; 0x2b
    12e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12e2:	8a 30       	cpi	r24, 0x0A	; 10
    12e4:	08 f4       	brcc	.+2      	; 0x12e8 <APP+0x1d8>
    12e6:	5a cf       	rjmp	.-332    	; 0x119c <APP+0x8c>
				SS_1D(PORTB, (Wanted_temp % 10));		//
				SS_2D(PORTB, (Wanted_temp / 10));		//
				Toggle_port(DDRB);						//
				_delay_ms(300);
			}
			DDRB = 0xff;
    12e8:	e7 e3       	ldi	r30, 0x37	; 55
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	80 83       	st	Z, r24
			State--;
    12f0:	8c a5       	ldd	r24, Y+44	; 0x2c
    12f2:	81 50       	subi	r24, 0x01	; 1
    12f4:	8c a7       	std	Y+44, r24	; 0x2c
    12f6:	31 cf       	rjmp	.-414    	; 0x115a <APP+0x4a>
			break;
			case 2:
			if((Wanted_temp <75))
    12f8:	8e a5       	ldd	r24, Y+46	; 0x2e
    12fa:	8b 34       	cpi	r24, 0x4B	; 75
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <APP+0x1f0>
    12fe:	b8 c0       	rjmp	.+368    	; 0x1470 <APP+0x360>
			{
				Wanted_temp += 5;
    1300:	8e a5       	ldd	r24, Y+46	; 0x2e
    1302:	8b 5f       	subi	r24, 0xFB	; 251
    1304:	8e a7       	std	Y+46, r24	; 0x2e
				EEPROM_Write(Wanted_temp,0x00);
    1306:	8e a5       	ldd	r24, Y+46	; 0x2e
    1308:	88 2f       	mov	r24, r24
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	60 e0       	ldi	r22, 0x00	; 0
    130e:	70 e0       	ldi	r23, 0x00	; 0
    1310:	0e 94 4d 08 	call	0x109a	; 0x109a <EEPROM_Write>
				for(i = 0 ; i < 5 ; i++ )//Blinking the 7Seg with set temperature for 3s
    1314:	1b a6       	std	Y+43, r1	; 0x2b
    1316:	a2 c0       	rjmp	.+324    	; 0x145c <APP+0x34c>
				{
					SS_1D(PORTB, (Wanted_temp % 10));		//
    1318:	a8 e3       	ldi	r26, 0x38	; 56
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e8 e3       	ldi	r30, 0x38	; 56
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	28 2f       	mov	r18, r24
    1324:	20 7f       	andi	r18, 0xF0	; 240
    1326:	8e a5       	ldd	r24, Y+46	; 0x2e
    1328:	9a e0       	ldi	r25, 0x0A	; 10
    132a:	69 2f       	mov	r22, r25
    132c:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodqi4>
    1330:	89 2f       	mov	r24, r25
    1332:	8f 70       	andi	r24, 0x0F	; 15
    1334:	82 2b       	or	r24, r18
    1336:	8c 93       	st	X, r24
					SS_2D(PORTB, (Wanted_temp / 10));		//
    1338:	a8 e3       	ldi	r26, 0x38	; 56
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	28 2f       	mov	r18, r24
    1344:	2f 70       	andi	r18, 0x0F	; 15
    1346:	8e a5       	ldd	r24, Y+46	; 0x2e
    1348:	9a e0       	ldi	r25, 0x0A	; 10
    134a:	69 2f       	mov	r22, r25
    134c:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodqi4>
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	82 95       	swap	r24
    1356:	92 95       	swap	r25
    1358:	90 7f       	andi	r25, 0xF0	; 240
    135a:	98 27       	eor	r25, r24
    135c:	80 7f       	andi	r24, 0xF0	; 240
    135e:	98 27       	eor	r25, r24
    1360:	82 2b       	or	r24, r18
    1362:	8c 93       	st	X, r24
					Toggle_port(DDRB);						//
    1364:	a7 e3       	ldi	r26, 0x37	; 55
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	e7 e3       	ldi	r30, 0x37	; 55
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	80 95       	com	r24
    1370:	8c 93       	st	X, r24
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a6 e9       	ldi	r26, 0x96	; 150
    1378:	b3 e4       	ldi	r27, 0x43	; 67
    137a:	89 8f       	std	Y+25, r24	; 0x19
    137c:	9a 8f       	std	Y+26, r25	; 0x1a
    137e:	ab 8f       	std	Y+27, r26	; 0x1b
    1380:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1382:	69 8d       	ldd	r22, Y+25	; 0x19
    1384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4a ef       	ldi	r20, 0xFA	; 250
    1390:	54 e4       	ldi	r21, 0x44	; 68
    1392:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	8d 8b       	std	Y+21, r24	; 0x15
    139c:	9e 8b       	std	Y+22, r25	; 0x16
    139e:	af 8b       	std	Y+23, r26	; 0x17
    13a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13a2:	6d 89       	ldd	r22, Y+21	; 0x15
    13a4:	7e 89       	ldd	r23, Y+22	; 0x16
    13a6:	8f 89       	ldd	r24, Y+23	; 0x17
    13a8:	98 8d       	ldd	r25, Y+24	; 0x18
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e8       	ldi	r20, 0x80	; 128
    13b0:	5f e3       	ldi	r21, 0x3F	; 63
    13b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    13b6:	88 23       	and	r24, r24
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <APP+0x2b4>
		__ticks = 1;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9c 8b       	std	Y+20, r25	; 0x14
    13c0:	8b 8b       	std	Y+19, r24	; 0x13
    13c2:	3f c0       	rjmp	.+126    	; 0x1442 <APP+0x332>
	else if (__tmp > 65535)
    13c4:	6d 89       	ldd	r22, Y+21	; 0x15
    13c6:	7e 89       	ldd	r23, Y+22	; 0x16
    13c8:	8f 89       	ldd	r24, Y+23	; 0x17
    13ca:	98 8d       	ldd	r25, Y+24	; 0x18
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	4f e7       	ldi	r20, 0x7F	; 127
    13d2:	57 e4       	ldi	r21, 0x47	; 71
    13d4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    13d8:	18 16       	cp	r1, r24
    13da:	4c f5       	brge	.+82     	; 0x142e <APP+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13dc:	69 8d       	ldd	r22, Y+25	; 0x19
    13de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e2       	ldi	r20, 0x20	; 32
    13ea:	51 e4       	ldi	r21, 0x41	; 65
    13ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	9c 8b       	std	Y+20, r25	; 0x14
    1402:	8b 8b       	std	Y+19, r24	; 0x13
    1404:	0f c0       	rjmp	.+30     	; 0x1424 <APP+0x314>
    1406:	88 ec       	ldi	r24, 0xC8	; 200
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9a 8b       	std	Y+18, r25	; 0x12
    140c:	89 8b       	std	Y+17, r24	; 0x11
    140e:	89 89       	ldd	r24, Y+17	; 0x11
    1410:	9a 89       	ldd	r25, Y+18	; 0x12
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <APP+0x302>
    1416:	9a 8b       	std	Y+18, r25	; 0x12
    1418:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141a:	8b 89       	ldd	r24, Y+19	; 0x13
    141c:	9c 89       	ldd	r25, Y+20	; 0x14
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	9c 8b       	std	Y+20, r25	; 0x14
    1422:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1424:	8b 89       	ldd	r24, Y+19	; 0x13
    1426:	9c 89       	ldd	r25, Y+20	; 0x14
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	69 f7       	brne	.-38     	; 0x1406 <APP+0x2f6>
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <APP+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142e:	6d 89       	ldd	r22, Y+21	; 0x15
    1430:	7e 89       	ldd	r23, Y+22	; 0x16
    1432:	8f 89       	ldd	r24, Y+23	; 0x17
    1434:	98 8d       	ldd	r25, Y+24	; 0x18
    1436:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9c 8b       	std	Y+20, r25	; 0x14
    1440:	8b 8b       	std	Y+19, r24	; 0x13
    1442:	8b 89       	ldd	r24, Y+19	; 0x13
    1444:	9c 89       	ldd	r25, Y+20	; 0x14
    1446:	98 8b       	std	Y+16, r25	; 0x10
    1448:	8f 87       	std	Y+15, r24	; 0x0f
    144a:	8f 85       	ldd	r24, Y+15	; 0x0f
    144c:	98 89       	ldd	r25, Y+16	; 0x10
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <APP+0x33e>
    1452:	98 8b       	std	Y+16, r25	; 0x10
    1454:	8f 87       	std	Y+15, r24	; 0x0f
			case 2:
			if((Wanted_temp <75))
			{
				Wanted_temp += 5;
				EEPROM_Write(Wanted_temp,0x00);
				for(i = 0 ; i < 5 ; i++ )//Blinking the 7Seg with set temperature for 3s
    1456:	8b a5       	ldd	r24, Y+43	; 0x2b
    1458:	8f 5f       	subi	r24, 0xFF	; 255
    145a:	8b a7       	std	Y+43, r24	; 0x2b
    145c:	8b a5       	ldd	r24, Y+43	; 0x2b
    145e:	85 30       	cpi	r24, 0x05	; 5
    1460:	08 f4       	brcc	.+2      	; 0x1464 <APP+0x354>
    1462:	5a cf       	rjmp	.-332    	; 0x1318 <APP+0x208>
					SS_1D(PORTB, (Wanted_temp % 10));		//
					SS_2D(PORTB, (Wanted_temp / 10));		//
					Toggle_port(DDRB);						//
					_delay_ms(300);
				}
				DDRB = 0xff;
    1464:	e7 e3       	ldi	r30, 0x37	; 55
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	80 83       	st	Z, r24
				
				State =0;
    146c:	1c a6       	std	Y+44, r1	; 0x2c
    146e:	75 ce       	rjmp	.-790    	; 0x115a <APP+0x4a>
			}
			else
			{
				State = 0 ;
    1470:	1c a6       	std	Y+44, r1	; 0x2c
    1472:	73 ce       	rjmp	.-794    	; 0x115a <APP+0x4a>
			}
			break;
			case 3 :
			if(Wanted_temp >35)
    1474:	8e a5       	ldd	r24, Y+46	; 0x2e
    1476:	84 32       	cpi	r24, 0x24	; 36
    1478:	08 f4       	brcc	.+2      	; 0x147c <APP+0x36c>
    147a:	b8 c0       	rjmp	.+368    	; 0x15ec <APP+0x4dc>
			{
				Wanted_temp -= 5;
    147c:	8e a5       	ldd	r24, Y+46	; 0x2e
    147e:	85 50       	subi	r24, 0x05	; 5
    1480:	8e a7       	std	Y+46, r24	; 0x2e
				EEPROM_Write(Wanted_temp,0x00);
    1482:	8e a5       	ldd	r24, Y+46	; 0x2e
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	0e 94 4d 08 	call	0x109a	; 0x109a <EEPROM_Write>
				for(i = 0 ; i < 5 ; i++ )//Blinking the 7Seg with set temperature for 3s
    1490:	1b a6       	std	Y+43, r1	; 0x2b
    1492:	a2 c0       	rjmp	.+324    	; 0x15d8 <APP+0x4c8>
				{
					SS_1D(PORTB, (Wanted_temp % 10));		//
    1494:	a8 e3       	ldi	r26, 0x38	; 56
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e8 e3       	ldi	r30, 0x38	; 56
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	28 2f       	mov	r18, r24
    14a0:	20 7f       	andi	r18, 0xF0	; 240
    14a2:	8e a5       	ldd	r24, Y+46	; 0x2e
    14a4:	9a e0       	ldi	r25, 0x0A	; 10
    14a6:	69 2f       	mov	r22, r25
    14a8:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodqi4>
    14ac:	89 2f       	mov	r24, r25
    14ae:	8f 70       	andi	r24, 0x0F	; 15
    14b0:	82 2b       	or	r24, r18
    14b2:	8c 93       	st	X, r24
					SS_2D(PORTB, (Wanted_temp / 10));		//
    14b4:	a8 e3       	ldi	r26, 0x38	; 56
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e8 e3       	ldi	r30, 0x38	; 56
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	28 2f       	mov	r18, r24
    14c0:	2f 70       	andi	r18, 0x0F	; 15
    14c2:	8e a5       	ldd	r24, Y+46	; 0x2e
    14c4:	9a e0       	ldi	r25, 0x0A	; 10
    14c6:	69 2f       	mov	r22, r25
    14c8:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodqi4>
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	82 95       	swap	r24
    14d2:	92 95       	swap	r25
    14d4:	90 7f       	andi	r25, 0xF0	; 240
    14d6:	98 27       	eor	r25, r24
    14d8:	80 7f       	andi	r24, 0xF0	; 240
    14da:	98 27       	eor	r25, r24
    14dc:	82 2b       	or	r24, r18
    14de:	8c 93       	st	X, r24
					Toggle_port(DDRB);						//
    14e0:	a7 e3       	ldi	r26, 0x37	; 55
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e7 e3       	ldi	r30, 0x37	; 55
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	80 95       	com	r24
    14ec:	8c 93       	st	X, r24
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a6 e9       	ldi	r26, 0x96	; 150
    14f4:	b3 e4       	ldi	r27, 0x43	; 67
    14f6:	8b 87       	std	Y+11, r24	; 0x0b
    14f8:	9c 87       	std	Y+12, r25	; 0x0c
    14fa:	ad 87       	std	Y+13, r26	; 0x0d
    14fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1500:	7c 85       	ldd	r23, Y+12	; 0x0c
    1502:	8d 85       	ldd	r24, Y+13	; 0x0d
    1504:	9e 85       	ldd	r25, Y+14	; 0x0e
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	4a ef       	ldi	r20, 0xFA	; 250
    150c:	54 e4       	ldi	r21, 0x44	; 68
    150e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	8f 83       	std	Y+7, r24	; 0x07
    1518:	98 87       	std	Y+8, r25	; 0x08
    151a:	a9 87       	std	Y+9, r26	; 0x09
    151c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    151e:	6f 81       	ldd	r22, Y+7	; 0x07
    1520:	78 85       	ldd	r23, Y+8	; 0x08
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	40 e8       	ldi	r20, 0x80	; 128
    152c:	5f e3       	ldi	r21, 0x3F	; 63
    152e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1532:	88 23       	and	r24, r24
    1534:	2c f4       	brge	.+10     	; 0x1540 <APP+0x430>
		__ticks = 1;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	3f c0       	rjmp	.+126    	; 0x15be <APP+0x4ae>
	else if (__tmp > 65535)
    1540:	6f 81       	ldd	r22, Y+7	; 0x07
    1542:	78 85       	ldd	r23, Y+8	; 0x08
    1544:	89 85       	ldd	r24, Y+9	; 0x09
    1546:	9a 85       	ldd	r25, Y+10	; 0x0a
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	3f ef       	ldi	r19, 0xFF	; 255
    154c:	4f e7       	ldi	r20, 0x7F	; 127
    154e:	57 e4       	ldi	r21, 0x47	; 71
    1550:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1554:	18 16       	cp	r1, r24
    1556:	4c f5       	brge	.+82     	; 0x15aa <APP+0x49a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1558:	6b 85       	ldd	r22, Y+11	; 0x0b
    155a:	7c 85       	ldd	r23, Y+12	; 0x0c
    155c:	8d 85       	ldd	r24, Y+13	; 0x0d
    155e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e2       	ldi	r20, 0x20	; 32
    1566:	51 e4       	ldi	r21, 0x41	; 65
    1568:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	0f c0       	rjmp	.+30     	; 0x15a0 <APP+0x490>
    1582:	88 ec       	ldi	r24, 0xC8	; 200
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9c 83       	std	Y+4, r25	; 0x04
    1588:	8b 83       	std	Y+3, r24	; 0x03
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <APP+0x47e>
    1592:	9c 83       	std	Y+4, r25	; 0x04
    1594:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	9e 81       	ldd	r25, Y+6	; 0x06
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a0:	8d 81       	ldd	r24, Y+5	; 0x05
    15a2:	9e 81       	ldd	r25, Y+6	; 0x06
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	69 f7       	brne	.-38     	; 0x1582 <APP+0x472>
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <APP+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	9e 83       	std	Y+6, r25	; 0x06
    15bc:	8d 83       	std	Y+5, r24	; 0x05
    15be:	8d 81       	ldd	r24, Y+5	; 0x05
    15c0:	9e 81       	ldd	r25, Y+6	; 0x06
    15c2:	9a 83       	std	Y+2, r25	; 0x02
    15c4:	89 83       	std	Y+1, r24	; 0x01
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <APP+0x4ba>
    15ce:	9a 83       	std	Y+2, r25	; 0x02
    15d0:	89 83       	std	Y+1, r24	; 0x01
			case 3 :
			if(Wanted_temp >35)
			{
				Wanted_temp -= 5;
				EEPROM_Write(Wanted_temp,0x00);
				for(i = 0 ; i < 5 ; i++ )//Blinking the 7Seg with set temperature for 3s
    15d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	8b a7       	std	Y+43, r24	; 0x2b
    15d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    15da:	85 30       	cpi	r24, 0x05	; 5
    15dc:	08 f4       	brcc	.+2      	; 0x15e0 <APP+0x4d0>
    15de:	5a cf       	rjmp	.-332    	; 0x1494 <APP+0x384>
					SS_1D(PORTB, (Wanted_temp % 10));		//
					SS_2D(PORTB, (Wanted_temp / 10));		//
					Toggle_port(DDRB);						//
					_delay_ms(300);
				}
				DDRB = 0xff;
    15e0:	e7 e3       	ldi	r30, 0x37	; 55
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	80 83       	st	Z, r24
				
				State =0;
    15e8:	1c a6       	std	Y+44, r1	; 0x2c
    15ea:	b7 cd       	rjmp	.-1170   	; 0x115a <APP+0x4a>
			}
			else
			{
				State = 0 ;
    15ec:	1c a6       	std	Y+44, r1	; 0x2c
    15ee:	b5 cd       	rjmp	.-1174   	; 0x115a <APP+0x4a>
			}
			break;
			default:
			EEPROM_Read(0x00, &Wanted_temp);
    15f0:	9e 01       	movw	r18, r28
    15f2:	22 5d       	subi	r18, 0xD2	; 210
    15f4:	3f 4f       	sbci	r19, 0xFF	; 255
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	b9 01       	movw	r22, r18
    15fc:	0e 94 66 08 	call	0x10cc	; 0x10cc <EEPROM_Read>
			if((read_bit(PINC,6)==1))
    1600:	e3 e3       	ldi	r30, 0x33	; 51
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	82 95       	swap	r24
    1608:	86 95       	lsr	r24
    160a:	86 95       	lsr	r24
    160c:	83 70       	andi	r24, 0x03	; 3
    160e:	88 2f       	mov	r24, r24
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	81 70       	andi	r24, 0x01	; 1
    1614:	90 70       	andi	r25, 0x00	; 0
    1616:	88 23       	and	r24, r24
    1618:	11 f0       	breq	.+4      	; 0x161e <APP+0x50e>
			{
				State=2;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	8c a7       	std	Y+44, r24	; 0x2c
				
			}
			if(read_bit(PINC,5)==1)
    161e:	e3 e3       	ldi	r30, 0x33	; 51
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	82 95       	swap	r24
    1626:	86 95       	lsr	r24
    1628:	87 70       	andi	r24, 0x07	; 7
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	81 70       	andi	r24, 0x01	; 1
    1630:	90 70       	andi	r25, 0x00	; 0
    1632:	88 23       	and	r24, r24
    1634:	11 f0       	breq	.+4      	; 0x163a <APP+0x52a>
			{
				State = 3 ;
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	8c a7       	std	Y+44, r24	; 0x2c
			}

			
			Current_temp = ADC_Read(3)/2.04;
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ADC_Read>
    1640:	cc 01       	movw	r24, r24
    1642:	a0 e0       	ldi	r26, 0x00	; 0
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	bc 01       	movw	r22, r24
    1648:	cd 01       	movw	r24, r26
    164a:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    164e:	dc 01       	movw	r26, r24
    1650:	cb 01       	movw	r24, r22
    1652:	bc 01       	movw	r22, r24
    1654:	cd 01       	movw	r24, r26
    1656:	2c e5       	ldi	r18, 0x5C	; 92
    1658:	3f e8       	ldi	r19, 0x8F	; 143
    165a:	42 e0       	ldi	r20, 0x02	; 2
    165c:	50 e4       	ldi	r21, 0x40	; 64
    165e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22
    1666:	bc 01       	movw	r22, r24
    1668:	cd 01       	movw	r24, r26
    166a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	8d a7       	std	Y+45, r24	; 0x2d
			
			SS_1D(PORTB, (Current_temp % 10));		////Presents the current temperature
    1674:	a8 e3       	ldi	r26, 0x38	; 56
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e8 e3       	ldi	r30, 0x38	; 56
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	28 2f       	mov	r18, r24
    1680:	20 7f       	andi	r18, 0xF0	; 240
    1682:	8d a5       	ldd	r24, Y+45	; 0x2d
    1684:	9a e0       	ldi	r25, 0x0A	; 10
    1686:	69 2f       	mov	r22, r25
    1688:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodqi4>
    168c:	89 2f       	mov	r24, r25
    168e:	8f 70       	andi	r24, 0x0F	; 15
    1690:	82 2b       	or	r24, r18
    1692:	8c 93       	st	X, r24
			SS_2D(PORTB, (Current_temp / 10));		//
    1694:	a8 e3       	ldi	r26, 0x38	; 56
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	28 2f       	mov	r18, r24
    16a0:	2f 70       	andi	r18, 0x0F	; 15
    16a2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16a4:	9a e0       	ldi	r25, 0x0A	; 10
    16a6:	69 2f       	mov	r22, r25
    16a8:	0e 94 ae 0b 	call	0x175c	; 0x175c <__udivmodqi4>
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	82 95       	swap	r24
    16b2:	92 95       	swap	r25
    16b4:	90 7f       	andi	r25, 0xF0	; 240
    16b6:	98 27       	eor	r25, r24
    16b8:	80 7f       	andi	r24, 0xF0	; 240
    16ba:	98 27       	eor	r25, r24
    16bc:	82 2b       	or	r24, r18
    16be:	8c 93       	st	X, r24

			/*	Heating Circuit	*/
			if (Current_temp < Wanted_temp)		//Turn on the heater & the Led if the current temp
    16c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    16c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    16c4:	89 17       	cp	r24, r25
    16c6:	78 f4       	brcc	.+30     	; 0x16e6 <APP+0x5d6>
			{									//is lower than the wanted temperature
				set_bit(PORTA, 4);				//Heater ON
    16c8:	ab e3       	ldi	r26, 0x3B	; 59
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	eb e3       	ldi	r30, 0x3B	; 59
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	80 61       	ori	r24, 0x10	; 16
    16d4:	8c 93       	st	X, r24
				set_bit(PORTD, 0);				//Red Led ON
    16d6:	a2 e3       	ldi	r26, 0x32	; 50
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e2 e3       	ldi	r30, 0x32	; 50
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	81 60       	ori	r24, 0x01	; 1
    16e2:	8c 93       	st	X, r24
    16e4:	0e c0       	rjmp	.+28     	; 0x1702 <APP+0x5f2>
			}
			else
			{
				clear_bit(PORTA, 4);			//Heater OFF
    16e6:	ab e3       	ldi	r26, 0x3B	; 59
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	eb e3       	ldi	r30, 0x3B	; 59
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	8f 7e       	andi	r24, 0xEF	; 239
    16f2:	8c 93       	st	X, r24
				clear_bit(PORTD, 0);			//Red Led OFF
    16f4:	a2 e3       	ldi	r26, 0x32	; 50
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e2 e3       	ldi	r30, 0x32	; 50
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	8e 7f       	andi	r24, 0xFE	; 254
    1700:	8c 93       	st	X, r24
			}
			/*	Cooling Circuit	*/
			if (Current_temp > Wanted_temp)
    1702:	9e a5       	ldd	r25, Y+46	; 0x2e
    1704:	8d a5       	ldd	r24, Y+45	; 0x2d
    1706:	98 17       	cp	r25, r24
    1708:	78 f4       	brcc	.+30     	; 0x1728 <APP+0x618>
			{
				set_bit(PORTA, 0);				//Fan ON
    170a:	ab e3       	ldi	r26, 0x3B	; 59
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	eb e3       	ldi	r30, 0x3B	; 59
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	81 60       	ori	r24, 0x01	; 1
    1716:	8c 93       	st	X, r24
				set_bit(PORTD, 1);				//Blue Light ON
    1718:	a2 e3       	ldi	r26, 0x32	; 50
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e2 e3       	ldi	r30, 0x32	; 50
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	82 60       	ori	r24, 0x02	; 2
    1724:	8c 93       	st	X, r24
    1726:	19 cd       	rjmp	.-1486   	; 0x115a <APP+0x4a>
			}
			else
			{
				clear_bit(PORTA, 0);			//Fan OFF
    1728:	ab e3       	ldi	r26, 0x3B	; 59
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	eb e3       	ldi	r30, 0x3B	; 59
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8e 7f       	andi	r24, 0xFE	; 254
    1734:	8c 93       	st	X, r24
				clear_bit(PORTD, 1);			//Blue Light OFF
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8d 7f       	andi	r24, 0xFD	; 253
    1742:	8c 93       	st	X, r24
    1744:	0a cd       	rjmp	.-1516   	; 0x115a <APP+0x4a>

00001746 <main>:

#include "APP/APP.h"


int main(void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
	APP();
    174e:	0e 94 88 08 	call	0x1110	; 0x1110 <APP>
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <__udivmodqi4>:
    175c:	99 1b       	sub	r25, r25
    175e:	79 e0       	ldi	r23, 0x09	; 9
    1760:	04 c0       	rjmp	.+8      	; 0x176a <__udivmodqi4_ep>

00001762 <__udivmodqi4_loop>:
    1762:	99 1f       	adc	r25, r25
    1764:	96 17       	cp	r25, r22
    1766:	08 f0       	brcs	.+2      	; 0x176a <__udivmodqi4_ep>
    1768:	96 1b       	sub	r25, r22

0000176a <__udivmodqi4_ep>:
    176a:	88 1f       	adc	r24, r24
    176c:	7a 95       	dec	r23
    176e:	c9 f7       	brne	.-14     	; 0x1762 <__udivmodqi4_loop>
    1770:	80 95       	com	r24
    1772:	08 95       	ret

00001774 <__prologue_saves__>:
    1774:	2f 92       	push	r2
    1776:	3f 92       	push	r3
    1778:	4f 92       	push	r4
    177a:	5f 92       	push	r5
    177c:	6f 92       	push	r6
    177e:	7f 92       	push	r7
    1780:	8f 92       	push	r8
    1782:	9f 92       	push	r9
    1784:	af 92       	push	r10
    1786:	bf 92       	push	r11
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	ca 1b       	sub	r28, r26
    179e:	db 0b       	sbc	r29, r27
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	09 94       	ijmp

000017ac <__epilogue_restores__>:
    17ac:	2a 88       	ldd	r2, Y+18	; 0x12
    17ae:	39 88       	ldd	r3, Y+17	; 0x11
    17b0:	48 88       	ldd	r4, Y+16	; 0x10
    17b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    17b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    17b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    17b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    17ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    17bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    17be:	b9 84       	ldd	r11, Y+9	; 0x09
    17c0:	c8 84       	ldd	r12, Y+8	; 0x08
    17c2:	df 80       	ldd	r13, Y+7	; 0x07
    17c4:	ee 80       	ldd	r14, Y+6	; 0x06
    17c6:	fd 80       	ldd	r15, Y+5	; 0x05
    17c8:	0c 81       	ldd	r16, Y+4	; 0x04
    17ca:	1b 81       	ldd	r17, Y+3	; 0x03
    17cc:	aa 81       	ldd	r26, Y+2	; 0x02
    17ce:	b9 81       	ldd	r27, Y+1	; 0x01
    17d0:	ce 0f       	add	r28, r30
    17d2:	d1 1d       	adc	r29, r1
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	ed 01       	movw	r28, r26
    17e0:	08 95       	ret

000017e2 <_exit>:
    17e2:	f8 94       	cli

000017e4 <__stop_program>:
    17e4:	ff cf       	rjmp	.-2      	; 0x17e4 <__stop_program>
